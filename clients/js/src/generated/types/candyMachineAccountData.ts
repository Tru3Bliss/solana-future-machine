/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  TokenStandard,
  TokenStandardArgs,
  getTokenStandardSerializer,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  Context,
  PublicKey,
  Serializer,
  mapSerializer,
} from '@metaplex-foundation/umi';
import {
  AccountVersion,
  AccountVersionArgs,
  CandyMachineData,
  CandyMachineDataArgs,
  getAccountVersionSerializer,
  getCandyMachineDataSerializer,
} from '.';

/** Candy machine state and config data. */
export type CandyMachineAccountData = {
  discriminator: Array<number>;
  /** Version of the account. */
  version: AccountVersion;
  /** Token standard to mint NFTs. */
  tokenStandard: TokenStandard;
  /** Features flags. */
  features: Array<number>;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: PublicKey;
  /** The collection mint for the candy machine. */
  collectionMint: PublicKey;
  /** Number of assets redeemed. */
  itemsRedeemed: bigint;
  /** Candy machine configuration data. */
  data: CandyMachineData;
};

export type CandyMachineAccountDataArgs = {
  /** Version of the account. */
  version: AccountVersionArgs;
  /** Token standard to mint NFTs. */
  tokenStandard: TokenStandardArgs;
  /** Features flags. */
  features: Array<number>;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: PublicKey;
  /** The collection mint for the candy machine. */
  collectionMint: PublicKey;
  /** Number of assets redeemed. */
  itemsRedeemed: number | bigint;
  /** Candy machine configuration data. */
  data: CandyMachineDataArgs;
};

export function getCandyMachineAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData> {
  const s = context.serializer;
  return mapSerializer<
    CandyMachineAccountDataArgs,
    any,
    CandyMachineAccountData
  >(
    s.struct<CandyMachineAccountData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['version', getAccountVersionSerializer(context)],
        ['tokenStandard', getTokenStandardSerializer(context)],
        ['features', s.array(s.u8(), { size: 6 })],
        ['authority', s.publicKey()],
        ['mintAuthority', s.publicKey()],
        ['collectionMint', s.publicKey()],
        ['itemsRedeemed', s.u64()],
        ['data', getCandyMachineDataSerializer(context)],
      ],
      { description: 'CandyMachineAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [115, 157, 18, 166, 35, 44, 221, 13],
    })
  ) as Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData>;
}
