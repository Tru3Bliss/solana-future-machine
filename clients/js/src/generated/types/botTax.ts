/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Serializer,
  SolAmount,
  mapAmountSerializer,
} from '@metaplex-foundation/umi';

/**
 * Guard is used to:
 * * charge a penalty for invalid transactions
 * * validate that the mint transaction is the last transaction
 * * verify that only authorized programs have instructions
 *
 * The `bot_tax` is applied to any error that occurs during the
 * validation of the guards.
 */

export type BotTax = { lamports: SolAmount; lastInstruction: boolean };

export type BotTaxArgs = BotTax;

export function getBotTaxSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BotTaxArgs, BotTax> {
  const s = context.serializer;
  return s.struct<BotTax>(
    [
      ['lamports', mapAmountSerializer(s.u64(), 'SOL', 9)],
      ['lastInstruction', s.bool()],
    ],
    { description: 'BotTax' }
  ) as Serializer<BotTaxArgs, BotTax>;
}
