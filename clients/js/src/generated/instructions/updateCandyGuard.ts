/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi';

// Accounts.
export type UpdateCandyGuardInstructionAccounts = {
  candyGuard: PublicKey;
  authority?: Signer;
  payer?: Signer;
  systemProgram?: PublicKey;
};

// Arguments.
export type UpdateCandyGuardInstructionData = {
  discriminator: Array<number>;
  data: Uint8Array;
};

export type UpdateCandyGuardInstructionDataArgs = { data: Uint8Array };

export function getUpdateCandyGuardInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  UpdateCandyGuardInstructionDataArgs,
  UpdateCandyGuardInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    UpdateCandyGuardInstructionDataArgs,
    UpdateCandyGuardInstructionData,
    UpdateCandyGuardInstructionData
  >(
    s.struct<UpdateCandyGuardInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['data', s.bytes()],
      ],
      { description: 'UpdateCandyGuardInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [219, 200, 88, 176, 158, 63, 253, 127],
      } as UpdateCandyGuardInstructionData)
  ) as Serializer<
    UpdateCandyGuardInstructionDataArgs,
    UpdateCandyGuardInstructionData
  >;
}

// Instruction.
export function updateCandyGuard(
  context: Pick<Context, 'serializer' | 'programs' | 'identity' | 'payer'>,
  input: UpdateCandyGuardInstructionAccounts &
    UpdateCandyGuardInstructionDataArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved accounts.
  const candyGuardAccount = input.candyGuard;
  const authorityAccount = input.authority ?? context.identity;
  const payerAccount = input.payer ?? context.payer;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Candy Guard.
  keys.push({
    pubkey: candyGuardAccount,
    isSigner: false,
    isWritable: isWritable(candyGuardAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Data.
  const data =
    getUpdateCandyGuardInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
