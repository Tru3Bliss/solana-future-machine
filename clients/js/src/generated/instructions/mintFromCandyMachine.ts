/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findCollectionAuthorityRecordPda,
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  publicKey,
} from '@metaplex-foundation/umi';
import { findCandyMachineAuthorityPda } from '../../hooked';

// Accounts.
export type MintFromCandyMachineInstructionAccounts = {
  candyMachine: PublicKey;
  authorityPda?: PublicKey;
  mintAuthority: Signer;
  payer?: Signer;
  nftMint: PublicKey;
  nftMintAuthority?: Signer;
  nftMetadata?: PublicKey;
  nftMasterEdition?: PublicKey;
  collectionAuthorityRecord?: PublicKey;
  collectionMint: PublicKey;
  collectionMetadata?: PublicKey;
  collectionMasterEdition?: PublicKey;
  collectionUpdateAuthority: PublicKey;
  tokenMetadataProgram?: PublicKey;
  tokenProgram?: PublicKey;
  systemProgram?: PublicKey;
  recentSlothashes?: PublicKey;
};

// Arguments.
export type MintFromCandyMachineInstructionData = {
  discriminator: Array<number>;
};

export type MintFromCandyMachineInstructionDataArgs = {};

export function getMintFromCandyMachineInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  MintFromCandyMachineInstructionDataArgs,
  MintFromCandyMachineInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    MintFromCandyMachineInstructionDataArgs,
    MintFromCandyMachineInstructionData,
    MintFromCandyMachineInstructionData
  >(
    s.struct<MintFromCandyMachineInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'MintFromCandyMachineInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [51, 57, 225, 47, 182, 146, 137, 166],
      } as MintFromCandyMachineInstructionData)
  ) as Serializer<
    MintFromCandyMachineInstructionDataArgs,
    MintFromCandyMachineInstructionData
  >;
}

// Instruction.
export function mintFromCandyMachine(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: MintFromCandyMachineInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved accounts.
  const candyMachineAccount = input.candyMachine;
  const authorityPdaAccount =
    input.authorityPda ??
    findCandyMachineAuthorityPda(context, {
      candyMachine: publicKey(candyMachineAccount),
    });
  const mintAuthorityAccount = input.mintAuthority;
  const payerAccount = input.payer ?? context.payer;
  const nftMintAccount = input.nftMint;
  const nftMintAuthorityAccount = input.nftMintAuthority ?? context.identity;
  const nftMetadataAccount =
    input.nftMetadata ??
    findMetadataPda(context, { mint: publicKey(nftMintAccount) });
  const nftMasterEditionAccount =
    input.nftMasterEdition ??
    findMasterEditionPda(context, { mint: publicKey(nftMintAccount) });
  const collectionMintAccount = input.collectionMint;
  const collectionAuthorityRecordAccount =
    input.collectionAuthorityRecord ??
    findCollectionAuthorityRecordPda(context, {
      mint: publicKey(collectionMintAccount),
      collectionAuthority: publicKey(authorityPdaAccount),
    });
  const collectionMetadataAccount =
    input.collectionMetadata ??
    findMetadataPda(context, { mint: publicKey(collectionMintAccount) });
  const collectionMasterEditionAccount =
    input.collectionMasterEdition ??
    findMasterEditionPda(context, { mint: publicKey(collectionMintAccount) });
  const collectionUpdateAuthorityAccount = input.collectionUpdateAuthority;
  const tokenMetadataProgramAccount = input.tokenMetadataProgram ?? {
    ...context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    ),
    isWritable: false,
  };
  const tokenProgramAccount = input.tokenProgram ?? {
    ...context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    ),
    isWritable: false,
  };
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };
  const recentSlothashesAccount =
    input.recentSlothashes ??
    publicKey('SysvarS1otHashes111111111111111111111111111');

  // Candy Machine.
  keys.push({
    pubkey: candyMachineAccount,
    isSigner: false,
    isWritable: isWritable(candyMachineAccount, true),
  });

  // Authority Pda.
  keys.push({
    pubkey: authorityPdaAccount,
    isSigner: false,
    isWritable: isWritable(authorityPdaAccount, true),
  });

  // Mint Authority.
  signers.push(mintAuthorityAccount);
  keys.push({
    pubkey: mintAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(mintAuthorityAccount, false),
  });

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Nft Mint.
  keys.push({
    pubkey: nftMintAccount,
    isSigner: false,
    isWritable: isWritable(nftMintAccount, true),
  });

  // Nft Mint Authority.
  signers.push(nftMintAuthorityAccount);
  keys.push({
    pubkey: nftMintAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(nftMintAuthorityAccount, false),
  });

  // Nft Metadata.
  keys.push({
    pubkey: nftMetadataAccount,
    isSigner: false,
    isWritable: isWritable(nftMetadataAccount, true),
  });

  // Nft Master Edition.
  keys.push({
    pubkey: nftMasterEditionAccount,
    isSigner: false,
    isWritable: isWritable(nftMasterEditionAccount, true),
  });

  // Collection Authority Record.
  keys.push({
    pubkey: collectionAuthorityRecordAccount,
    isSigner: false,
    isWritable: isWritable(collectionAuthorityRecordAccount, false),
  });

  // Collection Mint.
  keys.push({
    pubkey: collectionMintAccount,
    isSigner: false,
    isWritable: isWritable(collectionMintAccount, false),
  });

  // Collection Metadata.
  keys.push({
    pubkey: collectionMetadataAccount,
    isSigner: false,
    isWritable: isWritable(collectionMetadataAccount, true),
  });

  // Collection Master Edition.
  keys.push({
    pubkey: collectionMasterEditionAccount,
    isSigner: false,
    isWritable: isWritable(collectionMasterEditionAccount, false),
  });

  // Collection Update Authority.
  keys.push({
    pubkey: collectionUpdateAuthorityAccount,
    isSigner: false,
    isWritable: isWritable(collectionUpdateAuthorityAccount, false),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: tokenMetadataProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenMetadataProgramAccount, false),
  });

  // Token Program.
  keys.push({
    pubkey: tokenProgramAccount,
    isSigner: false,
    isWritable: isWritable(tokenProgramAccount, false),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Recent Slothashes.
  keys.push({
    pubkey: recentSlothashesAccount,
    isSigner: false,
    isWritable: isWritable(recentSlothashesAccount, false),
  });

  // Data.
  const data = getMintFromCandyMachineInstructionDataSerializer(
    context
  ).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
