/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetCandyGuardAuthorityInstructionAccounts = {
  candyGuard: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type SetCandyGuardAuthorityInstructionData = {
  discriminator: Array<number>;
  newAuthority: PublicKey;
};

export type SetCandyGuardAuthorityInstructionDataArgs = {
  newAuthority: PublicKey;
};

export function getSetCandyGuardAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetCandyGuardAuthorityInstructionDataArgs,
  SetCandyGuardAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetCandyGuardAuthorityInstructionDataArgs,
    any,
    SetCandyGuardAuthorityInstructionData
  >(
    s.struct<SetCandyGuardAuthorityInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['newAuthority', s.publicKey()],
      ],
      { description: 'SetCandyGuardAuthorityInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [133, 250, 37, 21, 110, 163, 26, 121],
    })
  ) as Serializer<
    SetCandyGuardAuthorityInstructionDataArgs,
    SetCandyGuardAuthorityInstructionData
  >;
}

// Args.
export type SetCandyGuardAuthorityInstructionArgs =
  SetCandyGuardAuthorityInstructionDataArgs;

// Instruction.
export function setCandyGuardAuthority(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: SetCandyGuardAuthorityInstructionAccounts &
    SetCandyGuardAuthorityInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyGuard: [input.candyGuard, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.candyGuard, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data =
    getSetCandyGuardAuthorityInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
