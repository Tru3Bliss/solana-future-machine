/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type UnwrapInstructionAccounts = {
  candyGuard: PublicKey | Pda;
  authority?: Signer;
  candyMachine: PublicKey | Pda;
  candyMachineAuthority?: Signer;
  candyMachineProgram?: PublicKey | Pda;
};

// Data.
export type UnwrapInstructionData = { discriminator: Array<number> };

export type UnwrapInstructionDataArgs = {};

export function getUnwrapInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<UnwrapInstructionDataArgs, UnwrapInstructionData> {
  const s = context.serializer;
  return mapSerializer<UnwrapInstructionDataArgs, any, UnwrapInstructionData>(
    s.struct<UnwrapInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'UnwrapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [126, 175, 198, 14, 212, 69, 50, 44],
    })
  ) as Serializer<UnwrapInstructionDataArgs, UnwrapInstructionData>;
}

// Instruction.
export function unwrap(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: UnwrapInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyGuard: [input.candyGuard, false] as const,
    candyMachine: [input.candyMachine, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'candyMachineAuthority',
    input.candyMachineAuthority
      ? ([input.candyMachineAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'candyMachineProgram',
    input.candyMachineProgram
      ? ([input.candyMachineProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplCandyMachine',
            'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.candyGuard, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachineAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachineProgram, false);

  // Data.
  const data = getUnwrapInstructionDataSerializer(context).serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
