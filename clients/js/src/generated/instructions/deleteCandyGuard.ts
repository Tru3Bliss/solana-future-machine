/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Accounts.
export type DeleteCandyGuardInstructionAccounts = {
  candyGuard: PublicKey;
  authority?: Signer;
};

// Arguments.
export type DeleteCandyGuardInstructionData = { discriminator: Array<number> };

export type DeleteCandyGuardInstructionDataArgs = {};

export function getDeleteCandyGuardInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  DeleteCandyGuardInstructionDataArgs,
  DeleteCandyGuardInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    DeleteCandyGuardInstructionDataArgs,
    DeleteCandyGuardInstructionData,
    DeleteCandyGuardInstructionData
  >(
    s.struct<DeleteCandyGuardInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'DeleteCandyGuardInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [183, 18, 70, 156, 148, 109, 161, 34],
      } as DeleteCandyGuardInstructionData)
  ) as Serializer<
    DeleteCandyGuardInstructionDataArgs,
    DeleteCandyGuardInstructionData
  >;
}

// Instruction.
export function deleteCandyGuard(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: DeleteCandyGuardInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved accounts.
  const candyGuardAccount = input.candyGuard;
  const authorityAccount = input.authority ?? context.identity;

  // Candy Guard.
  keys.push({
    pubkey: candyGuardAccount,
    isSigner: false,
    isWritable: isWritable(candyGuardAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, true),
  });

  // Data.
  const data = getDeleteCandyGuardInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
