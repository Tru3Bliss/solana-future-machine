/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
} from '@metaplex-foundation/umi';

// Accounts.
export type SetCandyMachineAuthorityInstructionAccounts = {
  candyMachine: PublicKey;
  authority?: Signer;
};

// Arguments.
export type SetCandyMachineAuthorityInstructionData = {
  discriminator: Array<number>;
  newAuthority: PublicKey;
};

export type SetCandyMachineAuthorityInstructionDataArgs = {
  newAuthority: PublicKey;
};

export function getSetCandyMachineAuthorityInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetCandyMachineAuthorityInstructionDataArgs,
  SetCandyMachineAuthorityInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetCandyMachineAuthorityInstructionDataArgs,
    SetCandyMachineAuthorityInstructionData,
    SetCandyMachineAuthorityInstructionData
  >(
    s.struct<SetCandyMachineAuthorityInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['newAuthority', s.publicKey()],
      ],
      { description: 'SetCandyMachineAuthorityInstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: [133, 250, 37, 21, 110, 163, 26, 121],
      } as SetCandyMachineAuthorityInstructionData)
  ) as Serializer<
    SetCandyMachineAuthorityInstructionDataArgs,
    SetCandyMachineAuthorityInstructionData
  >;
}

// Instruction.
export function setCandyMachineAuthority(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: SetCandyMachineAuthorityInstructionAccounts &
    SetCandyMachineAuthorityInstructionDataArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = context.programs.get(
    'mplCandyMachineCore'
  ).publicKey;

  // Resolved accounts.
  const candyMachineAccount = input.candyMachine;
  const authorityAccount = input.authority ?? context.identity;

  // Candy Machine.
  keys.push({
    pubkey: candyMachineAccount,
    isSigner: false,
    isWritable: isWritable(candyMachineAccount, true),
  });

  // Authority.
  signers.push(authorityAccount);
  keys.push({
    pubkey: authorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(authorityAccount, false),
  });

  // Data.
  const data =
    getSetCandyMachineAuthorityInstructionDataSerializer(context).serialize(
      input
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain,
  };
}
